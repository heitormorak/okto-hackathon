import boto3
import json
import logging
from typing import Dict, List

logger = logging.getLogger()
logger.setLevel(logging.INFO)

class BedrockClient:
    def __init__(self):
        self.bedrock = boto3.client('bedrock-runtime', region_name='us-east-1')
        self.model_id = 'anthropic.claude-3-5-sonnet-20240620-v1:0'
    
    def ask_specification_question(self, context: str, previous_answers: Dict) -> str:
        """
        Gera pr√≥xima pergunta baseada no contexto e respostas anteriores
        """
        try:
            # Montar hist√≥rico de perguntas e respostas
            qa_history = ""
            for i, (question, answer) in enumerate(previous_answers.items(), 1):
                qa_history += f"{i}. P: {question}\n   R: {answer}\n\n"
            
            prompt = f"""
            Voc√™ √© um especialista em especifica√ß√£o de features para a OKTO Payments, uma fintech brasileira.
            
            CONTEXTO DA FEATURE: {context}
            
            PERGUNTAS J√Å RESPONDIDAS:
            {qa_history}
            
            Sua tarefa √© fazer a pr√≥xima pergunta mais importante para completar a especifica√ß√£o.
            
            DIRETRIZES:
            - Foque em aspectos n√£o cobertos ainda
            - Considere o contexto de pagamentos/fintech brasileiro
            - Seja espec√≠fico sobre regras de neg√≥cio
            - Pense em integra√ß√µes necess√°rias
            - Considere aspectos de compliance (BACEN, LGPD)
            - Se j√° tem informa√ß√µes suficientes, responda: "ESPECIFICACAO_COMPLETA"
            
            TIPOS DE PERGUNTA POR CATEGORIA:
            - Neg√≥cio: objetivos, m√©tricas, usu√°rios-alvo
            - T√©cnico: integra√ß√µes, performance, arquitetura
            - UX: fluxos, valida√ß√µes, mensagens de erro
            - Compliance: regulamenta√ß√µes, auditoria, seguran√ßa
            - Operacional: suporte, monitoramento, rollback
            
            Retorne APENAS a pr√≥xima pergunta, sem explica√ß√µes.
            """
            
            response = self.bedrock.invoke_model(
                modelId=self.model_id,
                body=json.dumps({
                    "anthropic_version": "bedrock-2023-05-31",
                    "max_tokens": 200,
                    "messages": [{"role": "user", "content": prompt}]
                })
            )
            
            result = json.loads(response['body'].read())
            question = result['content'][0]['text'].strip()
            
            logger.info(f"Pergunta gerada: {question}")
            return question
            
        except Exception as e:
            logger.error(f"Erro ao gerar pergunta: {str(e)}")
            return "Erro ao gerar pergunta. Tente novamente."
    
    def identify_stakeholders(self, specification_data: Dict) -> Dict:
        """
        Identifica stakeholders necess√°rios baseado na especifica√ß√£o completa
        """
        try:
            prompt = f"""
            Baseado na especifica√ß√£o completa abaixo, identifique TODOS os stakeholders da OKTO que precisam aprovar esta feature:
            
            ESPECIFICA√á√ÉO:
            {json.dumps(specification_data, indent=2, ensure_ascii=False)}
            
            STAKEHOLDERS POSS√çVEIS NA OKTO:
            - Compliance: regulamenta√ß√µes, BACEN, LGPD, auditoria
            - Financeiro: impacto em fluxo de caixa, concilia√ß√£o, custos
            - UX: experi√™ncia do usu√°rio, design, usabilidade
            - Backend: desenvolvimento de APIs, integra√ß√µes, arquitetura
            - Frontend: interfaces, componentes, responsividade
            - QA: testes, cen√°rios, automa√ß√£o
            - Suporte: atendimento, documenta√ß√£o, FAQ
            - Comercial: impacto em vendas, pricing, estrat√©gia
            - RH: impacto em opera√ß√µes internas, treinamentos
            - Jur√≠dico: contratos, termos de uso, responsabilidades
            
            REGRAS:
            - Seja criterioso: apenas stakeholders realmente impactados
            - Explique claramente POR QUE cada um precisa aprovar
            - Considere o contexto espec√≠fico da OKTO (fintech/pagamentos)
            
            Retorne APENAS um JSON v√°lido no formato:
            {
                "stakeholders": [
                    {
                        "area": "Compliance",
                        "reason": "Precisa validar conformidade com regulamenta√ß√µes do BACEN para PIX",
                        "priority": "high"
                    },
                    {
                        "area": "UX", 
                        "reason": "Precisa desenhar fluxo de agendamento e cancelamento",
                        "priority": "high"
                    }
                ]
            }
            """
            
            response = self.bedrock.invoke_model(
                modelId=self.model_id,
                body=json.dumps({
                    "anthropic_version": "bedrock-2023-05-31",
                    "max_tokens": 800,
                    "messages": [{"role": "user", "content": prompt}]
                })
            )
            
            result = json.loads(response['body'].read())
            response_text = result['content'][0]['text'].strip()
            
            # Extrair JSON da resposta
            try:
                # Procurar por JSON v√°lido na resposta
                start = response_text.find('{')
                end = response_text.rfind('}') + 1
                json_str = response_text[start:end]
                
                stakeholders_data = json.loads(json_str)
                logger.info(f"Stakeholders identificados: {len(stakeholders_data['stakeholders'])}")
                return stakeholders_data
                
            except json.JSONDecodeError:
                logger.warning("N√£o foi poss√≠vel extrair JSON da resposta da IA")
                # Fallback com stakeholders padr√£o
                return {
                    "stakeholders": [
                        {"area": "Backend", "reason": "Nova funcionalidade t√©cnica", "priority": "high"},
                        {"area": "UX", "reason": "Impacto na experi√™ncia do usu√°rio", "priority": "medium"}
                    ]
                }
                
        except Exception as e:
            logger.error(f"Erro ao identificar stakeholders: {str(e)}")
            return {
                "stakeholders": [
                    {"area": "Backend", "reason": "Nova funcionalidade t√©cnica", "priority": "high"}
                ]
            }
    
    def generate_final_document(self, specification_data: Dict) -> str:
        """
        Gera documento final estruturado da especifica√ß√£o
        """
        try:
            prompt = f"""
            Baseado na especifica√ß√£o completa, gere um documento estruturado no formato Markdown para a OKTO.
            
            DADOS DA ESPECIFICA√á√ÉO:
            {json.dumps(specification_data, indent=2, ensure_ascii=False)}
            
            ESTRUTURA OBRIGAT√ìRIA:
            # SPEC-[ID]: [T√≠tulo da Feature]
            
            ## üìã Resumo Executivo
            - **Problema:** [problema que resolve]
            - **Solu√ß√£o:** [solu√ß√£o proposta]
            - **Impacto esperado:** [benef√≠cios quantificados]
            - **Complexidade:** [alta/m√©dia/baixa]
            
            ## üéØ Objetivos de Neg√≥cio
            [objetivos claros e mensur√°veis]
            
            ## üë• Personas e Casos de Uso
            [quem vai usar e como]
            
            ## ‚öôÔ∏è Especifica√ß√£o Funcional
            ### Funcionalidades Core
            [lista detalhada das funcionalidades]
            
            ### Regras de Neg√≥cio
            [regras espec√≠ficas e valida√ß√µes]
            
            ### Integra√ß√µes Necess√°rias
            [sistemas e APIs que precisa integrar]
            
            ## üîí Aspectos de Seguran√ßa e Compliance
            [considera√ß√µes de seguran√ßa, LGPD, BACEN]
            
            ## üì± Especifica√ß√£o de UX
            [fluxos, telas, componentes]
            
            ## üîß Considera√ß√µes T√©cnicas
            [arquitetura, performance, escalabilidade]
            
            ## üß™ Cen√°rios de Teste
            [casos de teste principais]
            
            ## üìä M√©tricas de Sucesso
            [KPIs para medir sucesso]
            
            ## ‚ö†Ô∏è Riscos e Mitiga√ß√µes
            [riscos identificados e como mitigar]
            
            ## üöÄ Plano de Rollout
            [estrat√©gia de lan√ßamento]
            
            Seja espec√≠fico, t√©cnico e completo. Use markdown bem formatado.
            """
            
            response = self.bedrock.invoke_model(
                modelId=self.model_id,
                body=json.dumps({
                    "anthropic_version": "bedrock-2023-05-31",
                    "max_tokens": 2000,
                    "messages": [{"role": "user", "content": prompt}]
                })
            )
            
            result = json.loads(response['body'].read())
            document = result['content'][0]['text'].strip()
            
            logger.info("Documento final gerado com sucesso")
            return document
            
        except Exception as e:
            logger.error(f"Erro ao gerar documento final: {str(e)}")
            return f"Erro ao gerar documento: {str(e)}"